/**
 * @name transcrever-audio
 * @version 3.0.0 (Fluxo h√≠brido: valida√ß√£o por palavra-chave OU orquestrador)
 * @description
 * Transcreve √°udio com Whisper, salva mensagem e:
 *  - Se cliente estiver "finalizando_pedido": invoca validar-pedido-audio
 *  - Sen√£o: invoca delivery-orquestrador (fluxo normal)
 */ import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type"
};
serve(async (req)=>{
  // CORS preflight
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: corsHeaders
    });
  }
  try {
    console.log("[TRANSCREVER-AUDIO] ===== INICIANDO TRANSCRI√á√ÉO =====");
    // ========================================
    // PASSO 1: RECEBER E VALIDAR DADOS
    // ========================================
    const { cliente_id, whatsapp, audio_base64 } = await req.json();
    if (!cliente_id) throw new Error("‚ùå cliente_id √© obrigat√≥rio");
    if (!whatsapp) throw new Error("‚ùå whatsapp √© obrigat√≥rio");
    if (!audio_base64) throw new Error("‚ùå audio_base64 √© obrigat√≥rio");
    console.log(`[TRANSCREVER-AUDIO] üìã Cliente: ${cliente_id}`);
    console.log(`[TRANSCREVER-AUDIO] üì± WhatsApp: ${whatsapp}`);
    // ========================================
    // PASSO 2: CONVERTER BASE64 ‚Üí BLOB
    // ========================================
    let audioBuffer;
    try {
      const cleanBase64 = audio_base64.includes(",") ? audio_base64.split(",")[1] : audio_base64;
      audioBuffer = Uint8Array.from(atob(cleanBase64), (c)=>c.charCodeAt(0));
    } catch (e) {
      console.error("[TRANSCREVER-AUDIO] ‚ùå Erro ao decodificar base64:", e.message);
      throw new Error("Formato de √°udio base64 inv√°lido");
    }
    const audioBlob = new Blob([
      audioBuffer
    ], {
      type: "audio/ogg; codecs=opus"
    });
    console.log(`[TRANSCREVER-AUDIO] ‚úÖ √Åudio convertido. Tamanho: ${audioBlob.size} bytes`);
    if (audioBlob.size === 0) throw new Error("√Åudio vazio ap√≥s convers√£o");
    // ========================================
    // PASSO 3: TRANSCREVER COM OPENAI WHISPER
    // ========================================
    const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");
    if (!OPENAI_API_KEY) throw new Error("‚öôÔ∏è OPENAI_API_KEY n√£o configurada no ambiente");
    const formData = new FormData();
    formData.append("file", audioBlob, "audio.ogg");
    formData.append("model", "whisper-1");
    formData.append("language", "pt");
    console.log("[TRANSCREVER-AUDIO] üöÄ Enviando para OpenAI Whisper API...");
    const whisperResponse = await fetch("https://api.openai.com/v1/audio/transcriptions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`
      },
      body: formData
    });
    if (!whisperResponse.ok) {
      const errorText = await whisperResponse.text();
      console.error("[TRANSCREVER-AUDIO] ‚ùå Erro do Whisper API:", errorText);
      throw new Error(`Whisper API falhou: ${whisperResponse.status} - ${errorText}`);
    }
    const whisperData = await whisperResponse.json();
    const transcricao = whisperData.text?.trim() || "";
    if (!transcricao) {
      console.warn("[TRANSCREVER-AUDIO] ‚ö†Ô∏è Transcri√ß√£o vazia retornada pelo Whisper");
      throw new Error("N√£o foi poss√≠vel transcrever o √°udio (resultado vazio)");
    }
    console.log(`[TRANSCREVER-AUDIO] ‚úÖ TRANSCRI√á√ÉO: "${transcricao}"`);
    // ========================================
    // PASSO 4: SALVAR MENSAGEM NO BANCO
    // ========================================
    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) throw new Error("Vari√°veis SUPABASE_URL / SUPABASE_SERVICE_ROLE_KEY n√£o configuradas");
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
    console.log("[TRANSCREVER-AUDIO] üíæ Salvando transcri√ß√£o no banco...");
    const { data: novaMensagem, error: insertError } = await supabase.from("mensagem_temporario").insert({
      cliente_id,
      whatsapp,
      mensagem: transcricao,
      tem_audio: true,
      audio_base64,
      timestamp_mensagem: new Date().toISOString()
    }).select("id, mensagem").single();
    if (insertError) {
      console.error("[TRANSCREVER-AUDIO] ‚ùå Erro ao salvar no banco:", insertError);
      throw new Error(`Erro ao salvar mensagem: ${insertError.message}`);
    }
    console.log(`[TRANSCREVER-AUDIO] ‚úÖ MENSAGEM SALVA! ID: ${novaMensagem.id}`);
    // ========================================
    // PASSO 5: DEFINIR FLUXO (VALIDA√á√ÉO x ORQUESTRADOR)
    // ========================================
    console.log("[TRANSCREVER-AUDIO] üß† Determinando fluxo de p√≥s-transcri√ß√£o...");
    const { data: clienteData, error: clienteError } = await supabase.from("clientes").select("id, status_conversa").eq("id", cliente_id).single();
    if (clienteError || !clienteData) {
      console.error("[TRANSCREVER-AUDIO] ‚ùå Erro ao buscar cliente:", clienteError?.message);
      throw new Error("Cliente n√£o encontrado para processar o √°udio");
    }
    console.log(`[TRANSCREVER-AUDIO] üë§ Status do cliente: ${clienteData.status_conversa}`);
    if (clienteData.status_conversa === "finalizando_pedido") {
      // üëâ Fluxo especial: valida palavra-chave. N√ÉO aciona orquestrador.
      console.log("[TRANSCREVER-AUDIO] üîê Cliente finalizando pedido ‚Üí chamar validar-pedido-audio");
      try {
        const { data: validaData, error: validaError } = await supabase.functions.invoke("validar-pedido-audio", {
          body: {
            cliente_id,
            transcricao
          }
        });
        if (validaError) {
          console.error("[TRANSCREVER-AUDIO] ‚ùå Erro ao invocar validar-pedido-audio:", validaError);
        } else {
          console.log("[TRANSCREVER-AUDIO] ‚úÖ validar-pedido-audio executada:", validaData);
        }
      } catch (invokeErr) {
        console.error("[TRANSCREVER-AUDIO] ‚ùå Falha ao chamar validar-pedido-audio:", invokeErr.message);
      }
      console.log("[TRANSCREVER-AUDIO] ===== ‚úÖ CONCLU√çDO (VALIDA√á√ÉO) =====");
      return new Response(JSON.stringify({
        success: true,
        mensagem_id: novaMensagem.id,
        transcricao,
        fluxo: "validacao_palavra_chave",
        orquestrador_acionado: false
      }), {
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json"
        },
        status: 200
      });
    }
    // üëâ Fluxo normal: acionar orquestrador (como antes)
    console.log("[TRANSCREVER-AUDIO] ‚û°Ô∏è Fluxo normal ‚Üí aciona orquestrador");
    try {
      const { data: orqData, error: orqError } = await supabase.functions.invoke("delivery-orquestrador", {
        body: {
          mensagem_id: novaMensagem.id
        }
      });
      if (orqError) {
        console.error("[TRANSCREVER-AUDIO] ‚ö†Ô∏è Erro ao invocar orquestrador:", orqError);
      } else {
        console.log("[TRANSCREVER-AUDIO] ‚úÖ Orquestrador invocado com sucesso");
      }
    } catch (invokeError) {
      console.error("[TRANSCREVER-AUDIO] ‚ö†Ô∏è Falha ao invocar orquestrador:", invokeError.message);
    // n√£o interrompe; mensagem j√° foi salva
    }
    console.log("[TRANSCREVER-AUDIO] ===== ‚úÖ CONCLU√çDO (FLUXO NORMAL) =====");
    return new Response(JSON.stringify({
      success: true,
      mensagem_id: novaMensagem.id,
      transcricao,
      fluxo: "normal",
      orquestrador_acionado: true
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      },
      status: 200
    });
  } catch (error) {
    console.error("[TRANSCREVER-AUDIO] üî• ===== ERRO FATAL =====");
    console.error("[TRANSCREVER-AUDIO] üî• Mensagem:", error.message);
    console.error("[TRANSCREVER-AUDIO] üî• Stack:", error.stack);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      },
      status: 500
    });
  }
});
